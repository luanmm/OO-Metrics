@model OOM.Web.Models.ElementDetailsModel

@{
    ViewBag.Title = String.Format("{0} details", Model.Element.Type.ToString());
}

@*
    <ul class="breadcrumb">
        <li>@Html.ActionLink("Home", "Index", "Home")</li>
        <li>@Html.ActionLink("Projects", "List", "Projects")</li>
        <li>@Html.ActionLink(Model.Revision.Project.Name, "Details", "Projects", new { id = Model.Revision.ProjectId }, null)</li>
        <li>@Html.ActionLink("Revisions", "List", new { id = Model.Revision.ProjectId })</li>
        <li>@Html.ActionLink(Model.Revision.RID, "Details", new { id = Model.Revision.Id })</li>
        <li class="active">@Model.Name</li>
    </ul>
*@
<div class="page-header">
    <div class="row">
        <div class="col-lg-12">
            <h1>@String.Format("{0} details", Model.Element.Type.ToString())</h1>
            <br />
            <div>
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(model => model.Element.Name)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.Element.Name)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Element.FullyQualifiedIdentifier)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.Element.FullyQualifiedIdentifier)
                    </dd>
                </dl>
                <br />
                <h2>History</h2>
                <style>
                    .link {
                        stroke: #dedede;
                    }

                    .node text {
                        pointer-events: none;
                        font: 10px sans-serif;
                        color: #333;
                    }

                    #history-chart {
                        width: 1140px;
                        height: 600px;
                        position: relative;
                    }

                        #history-chart .chart-toolbar {
                            position: absolute;
                            right: 15px;
                            top: 15px;
                        }

                            #history-chart .chart-toolbar a {
                                margin-left: 3px;
                            }
                </style>

                <div id="history-chart">
                    <div class="chart-toolbar">
                        <!-- TODO: Fix the centering problem of the "container" shape in the rendered SVG
                        <a href="#zoom-in" class="btn btn-primary btn-xs" data-toggle="tooltip" title="Zoom in" role="button">
                            <span class="fa fa-search-plus" aria-hidden="true"></span>
                        </a>
                        <a href="#zoom-out" class="btn btn-primary btn-xs" data-toggle="tooltip" title="Zoom out" role="button">
                            <span class="fa fa-search-minus" aria-hidden="true"></span>
                        </a>
                        <a href="#zoom-original" class="btn btn-primary btn-xs" data-toggle="tooltip" title="1:1" role="button">
                            <span class="fa fa-crosshairs" aria-hidden="true"></span>
                        </a>
                        -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/d3")
    <script>
        d3.json('@Url.Action("History", "Metrics")?revisionId=@(Model.Revision.Id)&elementType=@(Model.Element.Type.ToString())&elementId=@(Model.Element.Id)', function (error, data) {
            var width = 1140,
                height = 300,
                margins = {
                    top: 30,
                    right: 40,
                    bottom: 70,
                    left: 50
                };

            var xRange = d3.time.scale()
                .range([margins.left, width - margins.right])
                .domain([new Date(data[0].values[0].datetime), d3.time.day.offset(new Date(data[0].values[data[0].values.length - 1].datetime), 1)]);

            var yRange = d3.scale.linear()
                .range([height - margins.top, margins.bottom])
                .domain([d3.min(data[0].values, function (d) { return d.value; }), d3.max(data[0].values, function (d) { return d.value; })]);

            var xAxis = d3.svg.axis()
                .scale(xRange)
                .orient('bottom')
                .ticks(10)
                .tickFormat(d3.time.format("%Y-%m-%d"));
            /*
                    .scale(xRange)
                    .ticks(d3.time.days, 2)
                    .tickFormat(d3.time.format('%a %d'))
                    .tickSize(0)
                    .tickPadding(20);
                    */
            var yAxis = d3.svg.axis()
                    .scale(yRange)
                    .tickSize(5)
                    .orient('left')
                    .tickSubdivide(true);

            var vis = d3.select('#history-chart')
                .append('svg')
                .attr('width', width)
                .attr('height', height);

            vis.append('g')
                .attr('class', 'x axis')
                .attr('transform', 'translate(0, ' + (height - margins.bottom) + ')')
                .call(xAxis);

            vis.append('g')
                .attr('class', 'y axis')
                .attr('transform', 'translate(' + margins.left + ', 0)')
                .call(yAxis);

            var lineFunc = d3.svg.line()
                .x(function (d) { return xRange(new Date(d.datetime)); })
                .y(function (d) { return yRange(d.value); })
                .interpolate('linear');

            vis.append('svg:path')
                .attr('d', lineFunc(data[0].values))
                .attr('stroke', 'blue')
                .attr('stroke-width', 2)
                .attr('fill', 'none');
        });

        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
}