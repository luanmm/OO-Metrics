@model OOM.Model.Revision

@{
    ViewBag.Title = "Revision details";
}

<ul class="breadcrumb">
    <li>@Html.ActionLink("Home", "Index", "Home")</li>
    <li>@Html.ActionLink("Projects", "List", "Projects")</li>
    <li>@Html.ActionLink(Model.Project.Name, "Details", "Projects", new { id = Model.ProjectId }, null)</li>
    <li>@Html.ActionLink("Revisions", "List", new { id = Model.ProjectId })</li>
    <li class="active">@Model.RID</li>
</ul>
<div class="page-header">
    <div class="row">
        <div class="col-lg-12">
            <h1>Revision details</h1>
            <br />
            <div>
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(model => model.RID)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.RID)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Message)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.Message)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Author)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.Author)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.CreatedAt)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.CreatedAt)
                    </dd>
                </dl>
                <br />
                <h2>Graph</h2>
                <style>
                    .link {
                        stroke: #dedede;
                    }

                    .node {
                        cursor: zoom-in;
                    }

                    .node.selected {
                        cursor: zoom-out;
                    }

                    #revision-graph {
                        width: 1140px;
                        height: 600px;
                        position: relative;
                    }

                        #revision-graph .graph-details {
                            position: absolute;
                            top: 15px;
                            left: 15px;
                            font-style: oblique;
                            font-size: 18pt;
                            font-family: 'Lato', 'Helvetica Neue', 'Helvetica', 'Arial', 'sans-serif';
                        }

                        #revision-graph .graph-toolbar {
                            position: absolute;
                            right: 15px;
                            top: 15px;
                        }

                            #revision-graph .graph-toolbar a {
                                margin-left: 3px;
                            }
                </style>

                <div id="revision-graph">
                    <div class="graph-details" style="display:none;">
                        <div class="panel panel-primary">
                            <div class="panel-heading"></div>
                            <div class="panel-body"></div>
                        </div>
                    </div>
                    <div class="graph-toolbar">
                        <!-- TODO: Fix the centering problem of the "container" shape in the rendered SVG
                        <a href="#zoom-in" class="btn btn-primary btn-xs" data-toggle="tooltip" title="Zoom in" role="button">
                            <span class="fa fa-search-plus" aria-hidden="true"></span>
                        </a>
                        <a href="#zoom-out" class="btn btn-primary btn-xs" data-toggle="tooltip" title="Zoom out" role="button">
                            <span class="fa fa-search-minus" aria-hidden="true"></span>
                        </a>
                        -->
                        <a href="#zoom-none" class="btn btn-primary btn-xs" data-toggle="tooltip" title="1:1" role="button">
                            <span class="fa fa-crosshairs" aria-hidden="true"></span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="modal-element-details">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">Modal title</h4>
            </div>
            <div class="modal-body">
                <p>Metrics for the element:</p>
                <div id="history-chart"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/d3")
    <script>
        function getModalData(url) {
            d3.json(url, function (error, data) {
                var width = 558,
                    height = 300,
                    margins = {
                        top: 30,
                        right: 40,
                        bottom: 70,
                        left: 50
                    };

                var xRange = d3.time.scale()
                    .range([margins.left, width - margins.right])
                    .domain([new Date(data[0].values[0].datetime), d3.time.day.offset(new Date(data[0].values[data[0].values.length - 1].datetime), 1)]);

                var yRange = d3.scale.linear()
                    .range([height - margins.top, margins.bottom])
                    .domain([d3.min(data[0].values, function (d) { return d.value; }), d3.max(data[0].values, function (d) { return d.value; })]);

                var xAxis = d3.svg.axis()
                    .scale(xRange)
                    .orient('bottom')
                    .ticks(10)
                    .tickFormat(d3.time.format("%Y-%m-%d"));
                /*
                        .scale(xRange)
                        .ticks(d3.time.days, 2)
                        .tickFormat(d3.time.format('%a %d'))
                        .tickSize(0)
                        .tickPadding(20);
                        */
                var yAxis = d3.svg.axis()
                        .scale(yRange)
                        .tickSize(5)
                        .orient('left')
                        .tickSubdivide(true);

                var vis = d3.select('#history-chart')
                    .append('svg')
                    .attr('width', width)
                    .attr('height', height);

                vis.append('g')
                    .attr('class', 'x axis')
                    .attr('transform', 'translate(0, ' + (height - margins.bottom) + ')')
                    .call(xAxis);

                vis.append('g')
                    .attr('class', 'y axis')
                    .attr('transform', 'translate(' + margins.left + ', 0)')
                    .call(yAxis);

                var lineFunc = d3.svg.line()
                    .x(function (d) { return xRange(new Date(d.datetime)); })
                    .y(function (d) { return yRange(d.value); })
                    .interpolate('linear');

                vis.append('svg:path')
                    .attr('d', lineFunc(data[0].values))
                    .attr('stroke', 'blue')
                    .attr('stroke-width', 2)
                    .attr('fill', 'none');
            });
        }

        // t: current time, b: begInnIng value, c: change In value, d: duration
        $.easing.jswing = $.easing.swing;

        $.extend($.easing,
        {
            def: 'easeOutQuad',
            swing: function (x, t, b, c, d) {
                //alert($.easing.default);
                return $.easing[$.easing.def](x, t, b, c, d);
            },
            easeInQuad: function (x, t, b, c, d) {
                return c * (t /= d) * t + b;
            },
            easeOutQuad: function (x, t, b, c, d) {
                return -c * (t /= d) * (t - 2) + b;
            },
            easeInOutQuad: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t + b;
                return -c / 2 * ((--t) * (t - 2) - 1) + b;
            },
            easeInCubic: function (x, t, b, c, d) {
                return c * (t /= d) * t * t + b;
            },
            easeOutCubic: function (x, t, b, c, d) {
                return c * ((t = t / d - 1) * t * t + 1) + b;
            },
            easeInOutCubic: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
                return c / 2 * ((t -= 2) * t * t + 2) + b;
            },
            easeInQuart: function (x, t, b, c, d) {
                return c * (t /= d) * t * t * t + b;
            },
            easeOutQuart: function (x, t, b, c, d) {
                return -c * ((t = t / d - 1) * t * t * t - 1) + b;
            },
            easeInOutQuart: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
                return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
            },
            easeInQuint: function (x, t, b, c, d) {
                return c * (t /= d) * t * t * t * t + b;
            },
            easeOutQuint: function (x, t, b, c, d) {
                return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
            },
            easeInOutQuint: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
                return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
            },
            easeInSine: function (x, t, b, c, d) {
                return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
            },
            easeOutSine: function (x, t, b, c, d) {
                return c * Math.sin(t / d * (Math.PI / 2)) + b;
            },
            easeInOutSine: function (x, t, b, c, d) {
                return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
            },
            easeInExpo: function (x, t, b, c, d) {
                return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
            },
            easeOutExpo: function (x, t, b, c, d) {
                return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
            },
            easeInOutExpo: function (x, t, b, c, d) {
                if (t == 0) return b;
                if (t == d) return b + c;
                if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
                return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
            },
            easeInCirc: function (x, t, b, c, d) {
                return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
            },
            easeOutCirc: function (x, t, b, c, d) {
                return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
            },
            easeInOutCirc: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
                return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
            },
            easeInElastic: function (x, t, b, c, d) {
                var s = 1.70158; var p = 0; var a = c;
                if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;
                if (a < Math.abs(c)) { a = c; var s = p / 4; }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
            },
            easeOutElastic: function (x, t, b, c, d) {
                var s = 1.70158; var p = 0; var a = c;
                if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;
                if (a < Math.abs(c)) { a = c; var s = p / 4; }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
            },
            easeInOutElastic: function (x, t, b, c, d) {
                var s = 1.70158; var p = 0; var a = c;
                if (t == 0) return b; if ((t /= d / 2) == 2) return b + c; if (!p) p = d * (.3 * 1.5);
                if (a < Math.abs(c)) { a = c; var s = p / 4; }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
                return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
            },
            easeInBack: function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                return c * (t /= d) * t * ((s + 1) * t - s) + b;
            },
            easeOutBack: function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
            },
            easeInOutBack: function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
                return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
            },
            easeInBounce: function (x, t, b, c, d) {
                return c - $.easing.easeOutBounce(x, d - t, 0, c, d) + b;
            },
            easeOutBounce: function (x, t, b, c, d) {
                if ((t /= d) < (1 / 2.75)) {
                    return c * (7.5625 * t * t) + b;
                } else if (t < (2 / 2.75)) {
                    return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
                } else if (t < (2.5 / 2.75)) {
                    return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
                } else {
                    return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
                }
            },
            easeInOutBounce: function (x, t, b, c, d) {
                if (t < d / 2) return $.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
                return $.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
            }
        });

        var width = 1140,
            height = 600,
            centered;

        var selectNodeTitle = function (group) {
            if (group === 2)
                return 'Namespace';
            if (group === 3)
                return 'Class';
            if (group === 4)
                return 'Field';
            if (group === 5)
                return 'Method';
            return 'Revision';
        };

        var selectNodeColor = function (group) {
            if (group === 2)
                return '#474B55';
            if (group === 3)
                return '#47C547';
            if (group === 4)
                return '#FFBD3A';
            if (group === 5)
                return '#EA7724';
            return '#C0392B';
        };

        var selectNodeImage = function (group) {
            if (group === 2)
                return '@Url.Content("~/Content/images/icon-namespace.svg")';
            if (group === 3)
                return '@Url.Content("~/Content/images/icon-class.svg")';
            if (group === 4)
                return '@Url.Content("~/Content/images/icon-field.svg")';
            if (group === 5)
                return '@Url.Content("~/Content/images/icon-method.svg")';
            return '@Url.Content("~/Content/images/icon-revision.svg")';
        };

        var zooming = function () {
            container.attr("transform", "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")");
        };

        var nodeClicked = function (d) {
            var x, y, k, $panel = $("#revision-graph .graph-details");

            $panel.hide();

            if (d && centered !== d) {
                x = d.x;
                y = d.y;
                k = 4;
                centered = d;

                $panel
                    .html(d.name + (d.url ? '<a style="margin-left:10px;" class="btn btn-primary btn-xs btn-modal-element-details" data-title="Details of &quot;' + d.name + '&quot; ' + selectNodeTitle(d.group).toLowerCase() + '" data-url="' + d.url + '" data-toggle="tooltip" title="Element details" role="button"><span class="fa fa-eye" aria-hidden="true"></span></a>' : ''))
                    .css({
                        left: (width / 2) - 60,
                        top: (height / 2) - ($panel.outerHeight() / 2) - 2,
                        color: selectNodeColor(d.group)
                    })
                    .fadeIn(1200, "easeInBack")
                    .children('a').tooltip();
            } else {
                x = width / 2;
                y = height / 2;
                k = 1;
                centered = null;
            }

            d3.selectAll(".node")
                .classed("selected", centered && function (d) { return d === centered; });

            d3.selectAll(".node,.link")
                .transition()
                .duration(750)
                .style("opacity", centered && function (d) { return (d === centered) ? 1.0 : 0.2; });

            container.transition()
                .duration(750)
                .attr("transform", "translate(" + width / 2.5 + "," + height / 2 + ") scale(" + k + ") translate(" + -x + "," + -y + ")");
        }

        var force = d3.layout.force()
            .charge(-120)
            .linkDistance(30)
            .size([width, height]);

        var svg = d3.select("#revision-graph").append("svg")
            .attr("width", width)
            .attr("height", height);

        var zoom = d3.behavior.zoom()
            .size([width, height])
            .scaleExtent([1, 10])
            .on("zoom", zooming);

        svg.append("rect")
            .attr("width", "100%")
            .attr("height", "100%")
            //.call(zoom)
            //.on("mousedown.zoom", null)
            //.on("mousemove.zoom", null)
            //.on("dblclick.zoom", null)
            //.on("touchstart.zoom", null)
            //.on("wheel.zoom", null)
            //.on("mousewheel.zoom", null)
            //.on("MozMousePixelScroll.zoom", null)
            //.attr("rx", "3")
            //.attr("ry", "3")
            .attr("fill", "#f3f3f3");

        var container = svg.append("g");

        d3.json('@Url.Action("Graph", "Revisions", new { id = Model.Id })', function (error, graph) {
            force
                .nodes(graph.nodes)
                .links(graph.links)
                .start();

            var link = container.selectAll(".link")
                .data(graph.links)
                .enter().append("line")
                .attr("class", "link")
                .style("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = container.selectAll(".node")
                .data(graph.nodes)
                .enter().append("g")
                .attr("class", "node")
                //.call(force.drag)
                .on("click", nodeClicked);

            node.append("image")
                .attr("xlink:href", function (d) { return selectNodeImage(d.group); })
                .attr("x", -12)
                .attr("y", -12)
                .attr("width", 24)
                .attr("height", 24);

            var $container = $("#revision-graph");
            $container.mask();

            force.on("tick", function () {
                link.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                node.attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });
            }).on("end", function () {
                $container.unmask();
            });

            /*
            $('a[href="#zoom-in"]').on("click", function (e) {
                e.preventDefault();

                var $this = $(this);
                $this.add($this.siblings('a')).addClass("disabled");

                var translate = zoom.translate() || [0, 0];
                var scale = (zoom.scale() || 1) + 1;

                container.transition()
                    .duration(600)
                    .call(zoom.translate(translate).event)
                    .call(zoom.scale(scale > 10 ? 10 : scale).event)
                    .each("end", function () { $this.add($this.siblings('a')).removeClass("disabled"); });
            });

            $('a[href="#zoom-out"]').on("click", function (e) {
                e.preventDefault();

                var $this = $(this);
                $this.add($this.siblings('a')).addClass("disabled");

                var translate = zoom.translate() || [0, 0];
                var scale = (zoom.scale() || 1) - 1;
                container.transition()
                    .duration(600)
                    .call(zoom.translate(translate).event)
                    .call(zoom.scale(scale < 1 ? 1 : scale).event)
                    .each("end", function () { $this.add($this.siblings('a')).removeClass("disabled"); });
            });
            */

            $('a[href="#zoom-none"]').on("click", function (e) {
                e.preventDefault();
                var n = d3.select(".node.selected");
                if (n) n.on("click")();
            });
        });

        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });

        $(document).on('click', 'a.btn-modal-element-details', function (e) {
            e.preventDefault();

            var $this = $(this);
            var $modal = $('#modal-element-details');

            $modal.find('.modal-title').html($this.attr('data-title'));
            $modal.modal('show');

            getModalData($this.attr('data-url'));
        });
    </script>
}