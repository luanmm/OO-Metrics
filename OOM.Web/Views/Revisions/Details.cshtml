@model OOM.Model.Revision

@{
    ViewBag.Title = "Revision details";
}

<ul class="breadcrumb">
    <li>@Html.ActionLink("Home", "Index", "Home")</li>
    <li>@Html.ActionLink("Projects", "List", "Projects")</li>
    <li>@Html.ActionLink(Model.Project.Name, "Details", "Projects", new { id = Model.ProjectId }, null)</li>
    <li>@Html.ActionLink("Revisions", "List", new { id = Model.ProjectId })</li>
    <li class="active">@Model.RID</li>
</ul>
<div class="page-header">
    <div class="row">
        <div class="col-lg-12">
            <h1>Revision details</h1>
            <br />
            <div>
                <style>
                    svg {
                        font: 10px sans-serif;
                    }

                    .bar {
                        fill: #149C82;
                        clip-path: url(#clip);
                    }

                    .axis path,
                    .axis line {
                        fill: none;
                        stroke: #2C3E50;
                        shape-rendering: crispEdges;
                    }

                    .brush .extent {
                        stroke: #fff;
                        fill-opacity: .125;
                        shape-rendering: crispEdges;
                    }

                    .link {
                        stroke: #dedede;
                    }

                    #revision-graph {
                        width: 1140px;
                        height: 600px;
                        position: relative;
                        overflow: hidden;
                    }

                        #revision-graph div.details-panel {
                            position: absolute;
                            top: 0;
                            width: 550px;
                            height: 600px;
                            padding: 20px 20px 20px 188px;
                            -ms-word-wrap: break-word;
                            word-wrap: break-word;
                        }

                        #revision-graph div.details-panel p.root-name,
                        #revision-graph div.details-panel div.root-description {
                            color: #fefefe;
                            margin-bottom: 25px;
                        }

                        #revision-graph div.element-details {
                            position: absolute;
                            top: 25px;
                            right: 25px;
                        }

                    #revision-graph .node {
                        cursor: zoom-in;
                    }

                    #revision-graph .node.root {
                        cursor: zoom-out;
                    }

                    text.element-name {
                        font: 12pt sans-serif;
                        font-style: oblique;
                        font-weight: 500;
                    }

                    #history-chart {
                        width: 558px;
                        height: 300px;
                    }
                </style>

                <div id="revision-graph"></div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="modal-element-details">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">Modal title</h4>
            </div>
            <div class="modal-body">
                <form>
                    <fieldset>
                        <div class="form-group">
                            <label for="metric-name" class="control-label">Metric</label>
                            <select class="form-control" id="metric-name" name="metric-name">
                                <option value="">Select...</option>
                            </select>
                        </div>
                    </fieldset>
                </form>
                <div id="history-chart"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/d3")
    <script>
    var renderHistoryChart = function (selector, data) {
        var margin = { top: 10, right: 10, bottom: 40, left: 40 },
            width = 558 - margin.left - margin.right,
            height = 300 - margin.top - margin.bottom;

        var x = d3.scale.ordinal()
            .rangeRoundBands([0, width], .1);

        var y = d3.scale.linear()
            .range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient('bottom');

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient('left')
            .ticks(10);

        d3.select(selector).selectAll('svg').remove();

        var svg = d3.select(selector).append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
          .append('g')
            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

        x.domain(data.map(function (d) { return d.revision.number; }));
        y.domain([0, d3.max(data, function (d) { return d.value; })]);

        svg.append('g')
            .attr('class', 'x axis')
            .attr('transform', 'translate(0,' + height + ')')
            .call(xAxis);

        svg.append('g')
            .attr('class', 'y axis')
            .call(yAxis);

        svg.selectAll('.bar')
            .data(data)
            .enter().append('rect')
            .attr('class', 'bar')
            .attr('x', function (d) { return x(d.revision.number); })
            .attr('width', x.rangeBand())
            .attr('y', height)
            .attr('height', 0)
            .transition().duration(1000)
            .attr('y', function (d) { return y(d.value); })
            .attr('height', function (d) { return height - y(d.value); });
    };

    var renderExplorer = function (selector) {
        var selectNodeTitle = function (group) {
            if (group === 2)
                return 'Namespace';
            if (group === 3)
                return 'Class';
            if (group === 4)
                return 'Field';
            if (group === 5)
                return 'Method';
            return 'Revision';
        };

        var selectNodeColor = function (group) {
            if (group === 2)
                return '#474B55';
            if (group === 3)
                return '#47C547';
            if (group === 4)
                return '#FFBD3A';
            if (group === 5)
                return '#EA7724';
            return '#C0392B';
        };

        var selectNodeImage = function (group) {
            if (group === 2)
                return '@Url.Content("~/Content/images/icon-namespace.svg")';
            if (group === 3)
                return '@Url.Content("~/Content/images/icon-class.svg")';
            if (group === 4)
                return '@Url.Content("~/Content/images/icon-field.svg")';
            if (group === 5)
                return '@Url.Content("~/Content/images/icon-method.svg")';
            return '@Url.Content("~/Content/images/icon-revision.svg")';
        };

        var width = 1140,
            height = 600,
            offset = width / 7,
            link,
            node;

        d3.select(selector).selectAll('*').remove();

        var container = d3.select(selector);

        var svg = container
            .append('svg:svg')
            .attr('width', width)
            .attr('height', height);

        svg.append('svg:rect')
            .style('fill', '#f3f3f3')
            .attr('width', width)
            .attr('height', height);

        var force = d3.layout.force()
            .on('tick', function () {
                link.attr('x1', function (d) { return d.source.x; })
                    .attr('y1', function (d) { return d.source.y; })
                    .attr('x2', function (d) { return d.target.x; })
                    .attr('y2', function (d) { return d.target.y; })
                    .attr('transform', function (d) { return 'translate(' + offset + ', 0)'; });

                node.attr('transform', function (d) { return 'translate(' + (d.x + offset) + ', ' + d.y + ')'; });
            })
            .charge(function (d) { return -30 + (this.nodes().length - 1) * -5; })
            .linkDistance(70)
            .size([width, height]);

        var elementName = svg.append('svg:text')
            .attr('class', 'element-name')
            .attr('x', width - 25)
            .attr('y', height - 25)
            .attr('text-anchor', 'end')
            //.attr('text-size', '12pt')
            .style('opacity', 0);

        var loadRootNode = function (type, id) {
            $(selector).mask();

            d3.json('@Url.Action("Explore", "Revisions")?elementType=' + type + '&elementId=' + id, function (error, data) {
                    var root = data.nodes[0];
                    root.fixed = true;
                    root.x = width / 2;
                    root.y = height / 2;

                    force
                        .gravity(Math.atan(data.nodes.length - 1 / 50) / Math.PI * 0.4)
                        .nodes(data.nodes)
                        .links(data.links)
                        .start();

                    svg.selectAll('line.link').remove();

                    link = svg.selectAll('line.link').data(data.links).enter()
                        .insert('svg:line', '.node')
                        .attr('class', 'link')
                        .attr('x1', function (d) { return d.source.x; })
                        .attr('y1', function (d) { return d.source.y; })
                        .attr('x2', function (d) { return d.target.x; })
                        .attr('y2', function (d) { return d.target.y; });

                    svg.selectAll('image.node').remove();

                    node = svg.selectAll('image.node').data(data.nodes).enter()
                        .append('svg:image')
                        .attr('class', function (d) { return d.fixed === true ? 'node root' : 'node'; })
                        .attr('xlink:href', function (d) { return selectNodeImage(d.group); })
                        .attr('width', function (d) { return d.fixed === true ? 38 : 32; })
                        .attr('height', function (d) { return d.fixed === true ? 38 : 32; })
                        .attr('x', function (d) { return -parseInt(this.getAttribute('width')) / 2; })
                        .attr('y', function (d) { return -parseInt(this.getAttribute('height')) / 2; })
                        .on('click', function (d) {
                            var type, id;
                            if (d.root === true)
                                return;

                            if (d.parent) {
                                type = selectNodeTitle(d.parent.group);
                                id = d.parent.id;
                            }
                            else {
                                type = selectNodeTitle(d.group);
                                id = d.id;
                            }

                            loadRootNode(type, id);
                        });

                    svg.selectAll('.node:not(.root)')
                        .call(force.drag)
                        .on('mouseover', function (d) {
                            elementName
                                .style('opacity', 0)
                                .text(d.name)
                                .style('fill', function () { return selectNodeColor(d.group); })
                                .transition()
                                .duration(50)
                                .style('opacity', 1);
                        })
                        .on('mouseout', function (d) {
                            elementName.transition()
                                .duration(500)
                                .style('opacity', 0);
                        });

                    container.selectAll('div.details-panel').remove();

                    var detailsPanel = container.append('div');

                    detailsPanel
                        .attr('class', 'details-panel')
                        .style('background', function (d) { return selectNodeColor(root.group); })
                        .style('left', function (d) { return -(width / 2) + 'px'; })
                        .transition()
                        .duration(3000)
                        .ease('elastic')
                        .style('left', -(width / 7) + 'px');

                    detailsPanel.append('p')
                        .attr('class', 'root-name')
                        .html('<strong>' + root.name + '</strong>');

                    detailsPanel.append('div')
                        .attr('class', 'root-description')
                        .html(root.description);

                    container.selectAll('div.element-details').remove();

                    if (root.root !== true) {
                        container.append('div')
                            .attr('class', 'element-details')
                            .html('<a class="btn btn-primary btn-xs btn-modal-element-details" data-name="' + root.name + '" data-element-type="' + selectNodeTitle(root.group).toLowerCase() + '" data-element-id="' + root.id + '" data-revision-id="@Model.Id" role="button"><span class="fa fa-eye" aria-hidden="true"></span> Element details</a>');
                    }

                    $(selector).unmask();
                });
            };

            loadRootNode(null, '@Model.Id');
    };

    renderExplorer('#revision-graph');

    $('[data-toggle="tooltip"]').tooltip();

    $(document).on('click', 'a.btn-modal-element-details', function (e) {
        e.preventDefault();

        var $this = $(this);
        var $modal = $('#modal-element-details');

        var $metricsField = $('#metric-name');
        $metricsField.children().slice(1).remove();
        $metricsField.attr('data-element-type', $this.attr('data-element-type'));
        $metricsField.attr('data-element-id', $this.attr('data-element-id'));
        $metricsField.attr('data-revision-id', $this.attr('data-revision-id'));

        $('#history-chart').html('');

        $modal.find('.modal-title').html('Details of &quot;' + $this.attr('data-name') + '&quot; ' + $this.attr('data-element-type'));
        $modal.modal('show');
        $modal.mask();

        $.get('@Url.Action("ByElementType", "Metrics")', {
            elementType: $this.attr('data-element-type')
        })
        .done(function (metrics) {
            for (var m in metrics) {
                $metricsField.append('<option value="' + metrics[m].value + '">' + metrics[m].name + '</option>');
            }
        })
        .fail(function () {
            $modal.modal('hide');
            alert('An error has occurred getting metrics information.');
        })
        .always(function () {
            $modal.unmask();
        });
    });

    $(document).on('change', 'select#metric-name', function (e) {
        e.preventDefault();

        var $this = $(this);
        var metric = $this.val();
        if (!metric)
            return;

        $('#history-chart').html('');

        var $modal = $('#modal-element-details');
        $modal.mask();

        $.get('@Url.Action("History", "Metrics")', {
            elementType: $this.attr('data-element-type'),
            elementId: $this.attr('data-element-id'),
            revisionId: $this.attr('data-revision-id'),
            metricId: metric
        })
        .done(function (data) {
            renderHistoryChart('#history-chart', data);
        })
        .fail(function () {
            $modal.modal('hide');
            alert('An error has occurred getting metrics information.');
        })
        .always(function () {
            $modal.unmask();
        });
    });
    </script>
}