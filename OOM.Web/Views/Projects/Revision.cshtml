@model OOM.Model.Revision

@{
    ViewBag.Title = "Structure";
}

<div class="page-header">
    <div class="row">
        <div class="col-lg-12">
            <h1>
                Revision - Project Structure Map
            </h1>
            <br />
            <style>
                .link {
                    stroke: #dedede;
                }

                .node text {
                    pointer-events: none;
                    font: 10px sans-serif;
                    color: #333;
                }
            </style>
            <div id="structure-graph"></div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/d3")
    @Scripts.Render("~/bundles/qtip")
    <script>
        var width = 1140,
            height = 800;

        var selectNodeTitle = function (group) {
            if (group === 2)
                return 'Namespace';
            if (group === 3)
                return 'Class';
            if (group === 4)
                return 'Attribute';
            if (group === 5)
                return 'Method';
            return 'Revision';
        };

        var selectNodeImage = function (group) {
            if (group === 2)
                return '@Url.Content("~/Content/images/icon-namespace.svg")';
            if (group === 3)
                return '@Url.Content("~/Content/images/icon-class.svg")';
            if (group === 4)
                return '@Url.Content("~/Content/images/icon-attribute.svg")';
            if (group === 5)
                return '@Url.Content("~/Content/images/icon-method.svg")';
            return '@Url.Content("~/Content/images/icon-revision.svg")';
        };

        var color = d3.scale.category20();

        var force = d3.layout.force()
            .charge(-120)
            .linkDistance(30)
            .size([width, height]);

        var svg = d3.select("#structure-graph").append("svg")
            .attr("width", width)
            .attr("height", height);

        d3.json('@Url.Action("Structure", "Projects", new { id = Model.Id })', function (error, graph) {
            force
                .nodes(graph.nodes)
                .links(graph.links)
                .start();

            var link = svg.selectAll(".link")
                .data(graph.links)
                .enter().append("line")
                .attr("class", "link")
                .style("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = svg.selectAll(".node")
                .data(graph.nodes)
                //.enter().append("circle")
                .enter().append("g")
                .attr("class", "node")
                .attr("data-tooltip-title", function (d) { return selectNodeTitle(d.group); })
                .attr("data-tooltip-content", function (d) { return d.name; })
                //.attr("r", 5)
                //.style("fill", function (d) { return color(d.group); })
                .call(force.drag);

            node.append("image")
                .attr("xlink:href", function (d) { return selectNodeImage(d.group); })
                .attr("x", -12)
                .attr("y", -12)
                .attr("width", 24)
                .attr("height", 24);

            /*
            node.append("text")
                .attr("dx", 12)
                .attr("dy", ".35em")
                .text(function (d) { return d.name });

            node.append("title")
                .text(function (d) { return d.name; });
            */

            force.on("tick", function () {
                link.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                node.attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });
            });

            $(".node").each(function () {
                var elem = $(this);
                elem.qtip({
                    content: {
                        title: elem.attr('data-tooltip-title'),
                        text: elem.attr('data-tooltip-content')
                    },
                    style: {
                        classes: 'qtip-dark qtip-rounded qtip-shadow'
                    }
                });
            });
        });
    </script>
}
